name: Backend CI

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'Backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'Backend/**'
      - '.github/workflows/backend-ci.yml'

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: ['8.0.x']
        
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong!Passw0rd
          MSSQL_PID: Express
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong!Passw0rd -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./Backend

    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic
      working-directory: ./Backend

    - name: Build Debug
      run: dotnet build --no-restore --configuration Debug
      working-directory: ./Backend

    - name: Build Release
      run: dotnet build --no-restore --configuration Release
      working-directory: ./Backend

    - name: Run unit tests
      run: |
        dotnet test --no-build --configuration Release \
          --logger trx \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults/ \
          --verbosity normal
      working-directory: ./Backend

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results-${{ matrix.dotnet-version }}
        path: Backend/TestResults/

    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator \
          -reports:"Backend/TestResults/*/coverage.cobertura.xml" \
          -targetdir:"Backend/TestResults/CoverageReport" \
          -reporttypes:"Html;JsonSummary"
      if: matrix.dotnet-version == '8.0.x'

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.dotnet-version == '8.0.x'
      with:
        file: Backend/TestResults/*/coverage.cobertura.xml
        flags: backend
        name: backend-coverage

    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v4
      if: matrix.dotnet-version == '8.0.x'
      with:
        name: coverage-report
        path: Backend/TestResults/CoverageReport/

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./Backend

    - name: Check for vulnerable packages
      run: |
        cd Backend
        echo "Checking for vulnerable NuGet packages..."
        dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerable-packages.txt
        
        if grep -q "has the following vulnerable packages" vulnerable-packages.txt; then
          echo "❌ Vulnerable packages found!"
          cat vulnerable-packages.txt
          exit 1
        else
          echo "✅ No vulnerable packages found"
        fi

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        config-file: ./.github/codeql/codeql-config.yml

    - name: Build for CodeQL
      run: dotnet build --configuration Release
      working-directory: ./Backend

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  api-testing:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong!Passw0rd
          MSSQL_PID: Express
        ports:
          - 1433:1433

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore and build
      run: |
        dotnet restore
        dotnet build --configuration Release
      working-directory: ./Backend

    - name: Start API for testing
      run: |
        cd Backend
        dotnet run --configuration Release &
        sleep 30
      env:
        ASPNETCORE_ENVIRONMENT: Testing
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=CamsTestDb;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true"

    - name: Wait for API to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'

    - name: Run API health check
      run: |
        curl -f http://localhost:8080/health
        echo "API health check passed"

    - name: Run basic API tests
      run: |
        # Test authentication endpoint
        echo "Testing authentication..."
        response=$(curl -s -X POST http://localhost:8080/login/authenticate \
          -H "Content-Type: application/json" \
          -d '{"username": "platformadmin", "password": "PlatformAdmin123!"}' \
          -w "%{http_code}")
        
        if [[ $response == *"200"* ]]; then
          echo "✅ Authentication test passed"
        else
          echo "❌ Authentication test failed"
          exit 1
        fi

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Backend/Dockerfile
        push: false
        tags: cams-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run -d --name cams-test -p 8080:8080 \
          -e ASPNETCORE_ENVIRONMENT=Testing \
          cams-backend:test
        
        sleep 30
        
        # Test if the container is running
        if docker ps | grep -q cams-test; then
          echo "✅ Docker container is running"
        else
          echo "❌ Docker container failed to start"
          docker logs cams-test
          exit 1
        fi
        
        docker stop cams-test
        docker rm cams-test

  publish-packages:
    name: Publish NuGet Packages
    runs-on: ubuntu-latest
    needs: [build-and-test, security-analysis]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Create NuGet packages
      run: |
        cd Backend
        dotnet pack --configuration Release --output ./packages
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: Backend/packages/*.nupkg