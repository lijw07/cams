name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend .NET Tests and Build
  backend-test:
    name: Backend Tests & Build
    runs-on: ubuntu-latest
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong!Passw0rd
          MSSQL_PID: Express
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P YourStrong!Passw0rd -Q 'SELECT 1' -C"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5
          --health-start-period=60s

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --configuration Release --logger trx --collect:"XPlat Code Coverage"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: TestResults/

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: TestResults/*/coverage.cobertura.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests and Build
  frontend-test:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend

    - name: Run linting
      run: npm run lint
      working-directory: ./frontend

    - name: Run type checking
      run: npm run type-check
      working-directory: ./frontend

    - name: Build frontend
      run: npm run build
      working-directory: ./frontend
      env:
        VITE_GA_MEASUREMENT_ID: ${{ secrets.VITE_GA_MEASUREMENT_ID }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Setup .NET for security scan
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Check for vulnerable packages
      run: |
        dotnet restore
        dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerable-packages.txt
        if grep -q "has the following vulnerable packages" vulnerable-packages.txt; then
          echo "Vulnerable packages found!"
          exit 1
        fi

  # Docker build and push
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deployment (placeholder for your deployment strategy)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Add your deployment commands here"
        echo "For example: kubectl, docker-compose, or cloud provider CLI"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        
    # Example deployment commands (uncomment and modify as needed):
    # - name: Deploy with docker-compose
    #   run: |
    #     echo "${{ secrets.DOCKER_COMPOSE_PROD }}" > docker-compose.prod.yml
    #     docker-compose -f docker-compose.prod.yml pull
    #     docker-compose -f docker-compose.prod.yml up -d
    
    # - name: Deploy to Kubernetes
    #   run: |
    #     echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
    #     export KUBECONFIG=kubeconfig
    #     kubectl set image deployment/cams-backend cams-backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    #     kubectl set image deployment/cams-frontend cams-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # Notify on deployment completion
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
    - name: Notify deployment status
      uses: actions/github-script@v6
      with:
        script: |
          const deploymentResult = '${{ needs.deploy.result }}';
          const message = deploymentResult === 'success' 
            ? 'üöÄ Deployment completed successfully!' 
            : '‚ùå Deployment failed!';
          
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: `${message}\n\nBuild: ${{ github.run_number }}\nCommit: ${context.sha.substring(0, 7)}`
          });