name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

permissions:
  contents: read

env:
  DOTNET_VERSION: '8.0.412'
  NODE_VERSION: '20.x'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Build and Test
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Test with coverage
      run: |
        dotnet test --no-build --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        flags: backend
        name: backend-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: ./coverage
        retention-days: 7

  # Frontend Build and Test
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    needs: [backend]  # Need backend to generate types
    permissions:
      contents: read
      actions: write
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET (for type generation)
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate OpenAPI types
      run: |
        # Start backend for type generation
        cd ..
        dotnet restore
        dotnet build --configuration Release
        
        # Start API in background
        nohup dotnet run --no-build --configuration Release --urls=http://localhost:8080 > api.log 2>&1 &
        API_PID=$!
        
        # Wait for API to be ready
        timeout 120 bash -c 'until curl -s http://localhost:8080/health; do sleep 2; done'
        
        # Generate types
        cd frontend
        npm run generate-types-from-url
        
        # Stop the API
        kill $API_PID || true
    
    - name: Check for type changes
      run: |
        if [[ -n $(git status --porcelain src/types/api.generated.ts) ]]; then
          echo "API types were updated during build"
          git diff src/types/api.generated.ts
        fi
    
    - name: Lint
      run: npm run lint
    
    - name: Type check
      run: npm run type-check
    
    - name: Build
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist
        retention-days: 7

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: .NET Security Scan
      run: |
        dotnet list package --vulnerable --include-transitive
    
    - name: Frontend Dependency Audit
      working-directory: ./frontend
      run: npm audit --audit-level=high

  # Docker Build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [frontend]  # Frontend already depends on backend
    if: success()
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Backend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}-backend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Integration Tests (using Docker Compose)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend]  # Frontend already depends on backend
    if: success()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run integration tests with Docker Compose
      run: |
        docker-compose -f docker-compose.yml up -d
        sleep 30  # Wait for services to be ready
        
        # Health check
        curl -f http://localhost:5162/health || exit 1
        curl -f http://localhost:3000 || exit 1
        
        # Run any integration tests here
        # docker-compose exec -T backend dotnet test --filter Category=Integration
        
        docker-compose down -v

  # SonarCloud Analysis (Optional - requires setup)
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [frontend]  # Frontend already depends on backend
    if: success() && github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true  # Don't fail if SonarCloud is not configured

  # Summary
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [frontend, security, docker, integration-tests]  # Frontend already depends on backend
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | ${{ needs.backend.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ${{ needs.frontend.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker | ${{ needs.docker.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY