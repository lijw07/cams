#!/bin/bash

# CAMS Application Startup Script
# This script demonstrates the proper startup sequence for the CAMS application
# 
# Startup Order:
# 1. Database (SQL Server) - Must be healthy before proceeding
# 2. Backend (.NET API) - Waits for database health check, must be healthy before proceeding  
# 3. Frontend (React) - Waits for backend health check

set -e

echo "üöÄ Starting CAMS Application with proper dependency sequence..."
echo ""

# Get environment (default to development)
ENVIRONMENT=${1:-dev}

if [ "$ENVIRONMENT" = "prod" ]; then
    COMPOSE_FILE="docker-compose.prod.yml"
    echo "üì¶ Using production configuration"
else
    COMPOSE_FILE="docker-compose.yml" 
    echo "üîß Using development configuration"
fi

echo ""
echo "üìã Startup Sequence:"
echo "   1Ô∏è‚É£  Database (SQL Server 2022)"
echo "   2Ô∏è‚É£  Backend (.NET 8 API)"  
echo "   3Ô∏è‚É£  Frontend (React + Vite)"
echo ""

# Function to check if a service is healthy
check_service_health() {
    local service_name=$1
    local max_attempts=30
    local attempt=1
    
    echo "‚è≥ Waiting for $service_name to be healthy..."
    
    while [ $attempt -le $max_attempts ]; do
        if docker-compose -f $COMPOSE_FILE ps $service_name | grep -q "healthy"; then
            echo "‚úÖ $service_name is healthy!"
            return 0
        fi
        
        echo "   Attempt $attempt/$max_attempts - $service_name not ready yet..."
        sleep 5
        attempt=$((attempt + 1))
    done
    
    echo "‚ùå $service_name failed to become healthy after $max_attempts attempts"
    return 1
}

# Start the database first
echo "1Ô∏è‚É£  Starting Database..."
docker-compose -f $COMPOSE_FILE up -d db

# Wait for database to be healthy
if ! check_service_health "db"; then
    echo "üí• Database startup failed. Exiting."
    exit 1
fi

echo ""
echo "2Ô∏è‚É£  Starting Backend (waits for database health check)..."
docker-compose -f $COMPOSE_FILE up -d backend

# Wait for backend to be healthy  
if ! check_service_health "backend"; then
    echo "üí• Backend startup failed. Exiting."
    exit 1
fi

echo ""
echo "3Ô∏è‚É£  Starting Frontend (waits for backend health check)..."
docker-compose -f $COMPOSE_FILE up -d frontend

# Wait for frontend to be healthy
if ! check_service_health "frontend"; then
    echo "üí• Frontend startup failed. Exiting."
    exit 1
fi

echo ""
echo "üéâ All services are healthy and running!"
echo ""
echo "üåê Application URLs:"
if [ "$ENVIRONMENT" = "prod" ]; then
    echo "   Frontend: http://localhost"
    echo "   Backend API: http://localhost:8080"
else
    echo "   Frontend: http://localhost:3000"
    echo "   Backend API: http://localhost:8080"
fi
echo "   Database: localhost:1433"
echo ""
echo "üìä View running services:"
echo "   docker-compose -f $COMPOSE_FILE ps"
echo ""
echo "üìã View logs:"
echo "   docker-compose -f $COMPOSE_FILE logs -f [service_name]"
echo ""
echo "üõë Stop all services:"
echo "   docker-compose -f $COMPOSE_FILE down"