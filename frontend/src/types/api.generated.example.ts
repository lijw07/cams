/**
 * This is an EXAMPLE of what will be generated by openapi-typescript
 * The actual generated file will be created when you run: npm run generate-types-from-url
 * DO NOT EDIT THIS FILE - It's just for demonstration
 */

export interface paths {
  "/auth/authenticate": {
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LoginRequest"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["LoginResponse"];
          };
        };
      };
    };
  };
  "/api/users": {
    get: {
      parameters: {
        query?: {
          "page-size"?: number;
          "page-number"?: number;
          "search-term"?: string;
          "sort-by"?: string;
          "sort-order"?: "asc" | "desc";
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedResponse_UserDto"];
          };
        };
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateUserRequest"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["UserDto"];
          };
        };
      };
    };
  };
  "/api/applications": {
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["Application"][];
          };
        };
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ApplicationRequest"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["Application"];
          };
        };
      };
    };
  };
  "/api/database-connections": {
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["DatabaseConnection"][];
          };
        };
      };
    };
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["DatabaseConnectionRequest"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["DatabaseConnection"];
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    LoginRequest: {
      Username: string;
      Password: string;
    };
    LoginResponse: {
      Token: string;
      RefreshToken: string;
      Expiration: string;
      User: components["schemas"]["UserDto"];
    };
    UserDto: {
      Id: string;
      Username: string;
      Email: string;
      FirstName?: string;
      LastName?: string;
      PhoneNumber?: string;
      IsActive: boolean;
      CreatedAt: string;
      UpdatedAt: string;
      LastLoginAt?: string;
      Roles: string[];
    };
    CreateUserRequest: {
      Username: string;
      Email: string;
      Password: string;
      FirstName?: string;
      LastName?: string;
      PhoneNumber?: string;
      RoleIds?: string[];
    };
    Application: {
      Id: string;
      Name: string;
      Description?: string;
      Version?: string;
      Environment?: string;
      Tags?: string;
      IsActive: boolean;
      CreatedAt: string;
      UpdatedAt: string;
      LastAccessedAt?: string;
      DatabaseConnectionCount: number;
    };
    ApplicationRequest: {
      Name: string;
      Description?: string;
      Version?: string;
      Environment?: string;
      Tags?: string;
      IsActive: boolean;
    };
    DatabaseConnection: {
      Id: string;
      Name: string;
      Description?: string;
      DatabaseType: number;
      Server: string;
      Port?: number;
      Database?: string;
      IsActive: boolean;
      CreatedAt: string;
      UpdatedAt: string;
      LastTestedAt?: string;
      ApplicationId: string;
    };
    DatabaseConnectionRequest: {
      Name: string;
      Description?: string;
      DatabaseType: number;
      Server: string;
      Port?: number;
      Database?: string;
      Username?: string;
      Password?: string;
      ConnectionString?: string;
      IsActive: boolean;
      ApplicationId: string;
    };
    PaginatedResponse_UserDto: {
      Items: components["schemas"]["UserDto"][];
      TotalCount: number;
      PageNumber: number;
      PageSize: number;
      TotalPages: number;
      HasPreviousPage: boolean;
      HasNextPage: boolean;
    };
    ApiError: {
      Code: string;
      Message: string;
      Details?: Record<string, string[]>;
      TraceId?: string;
    };
  };
}

// Re-export for convenience
export type LoginRequest = components["schemas"]["LoginRequest"];
export type LoginResponse = components["schemas"]["LoginResponse"];
export type UserDto = components["schemas"]["UserDto"];
export type Application = components["schemas"]["Application"];
export type ApplicationRequest = components["schemas"]["ApplicationRequest"];
export type DatabaseConnection = components["schemas"]["DatabaseConnection"];
export type DatabaseConnectionRequest = components["schemas"]["DatabaseConnectionRequest"];