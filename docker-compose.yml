services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: "${COMPOSE_PROJECT_NAME:-cams}-frontend"
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=/api
      - VITE_PROXY_TARGET=http://backend:8080
    volumes:
      - ./frontend:/app:consistent
      - /app/node_modules
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - cams-network
    restart: unless-stopped

  backend:
    build:
      context: ./
      dockerfile: Backend/Dockerfile
      target: dev
    container_name: "${COMPOSE_PROJECT_NAME:-cams}-backend"
    ports:
      - "8080:8080"
      - "57404:57404"  # Debug port
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - DOTNET_MODIFIABLE_ASSEMBLIES=Debug
      # Database Configuration
      - DB_HOST=db
      - DB_PORT=1433
      - DB_NAME=CamsDb
      - DB_USER=sa
      - DB_PASSWORD=${DB_PASSWORD:-YourStrong!Passw0rd}
      # JWT Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-that-is-at-least-32-characters-long!}
      - JWT_ISSUER=CamsApp
      - JWT_AUDIENCE=CamsUsers
      - JWT_EXPIRES_IN_MINUTES=60
      - JWT_REFRESH_EXPIRES_IN_DAYS=7
      # Security Configuration
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-}
      # Email Configuration (Mailtrap.io)
      - EmailSettings__SmtpHost=live.smtp.mailtrap.io
      - EmailSettings__SmtpPort=587
      - EmailSettings__SmtpUsername=${MAILTRAP_USERNAME:-}
      - EmailSettings__SmtpPassword=${MAILTRAP_PASSWORD:-}
      - EmailSettings__FromEmail=${MAILTRAP_FROM_EMAIL:-mailtrap@example.com}
      - EmailSettings__FromName=CAMS System
      - EmailSettings__EnableSsl=true
      - EmailSettings__UseAuthentication=true
      - EmailSettings__TimeoutSeconds=30
      # Logging
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
    volumes:
      - ./:/src:consistent
      - backend_cache:/src/obj
      - backend_bin:/src/bin
      - dotnet_nuget:/home/dotnetuser/.nuget
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - cams-network
    restart: unless-stopped

  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: "${COMPOSE_PROJECT_NAME:-cams}-database"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD:-YourStrong!Passw0rd}
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sql_data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P \"$SA_PASSWORD\" -Q \"SELECT 1\" -C -l 30"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 45s
    networks:
      - cams-network
    restart: unless-stopped



networks:
  cams-network:
    driver: bridge
    name: "${COMPOSE_PROJECT_NAME:-cams}-network"

volumes:
  sql_data:
    name: "${COMPOSE_PROJECT_NAME:-cams}-sql-data"
  backend_cache:
    name: "${COMPOSE_PROJECT_NAME:-cams}-backend-cache"
  backend_bin:
    name: "${COMPOSE_PROJECT_NAME:-cams}-backend-bin"
  dotnet_nuget:
    name: "${COMPOSE_PROJECT_NAME:-cams}-dotnet-nuget"
  frontend_node_modules:
    name: "${COMPOSE_PROJECT_NAME:-cams}-frontend-node-modules"